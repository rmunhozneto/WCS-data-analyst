from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

movies = pd.read_csv('https://raw.githubusercontent.com/codeheroku/Introduction-to-Machine-Learning/master/Building%20a%20Movie%20Recommendation%20Engine/movie_dataset.csv') #this is the already cleaned movie df to be used
movies.head() #just to check what is in the first 5 rows of the table

movies.columns #to check the column names in order to group the features

#selecting features to build the recommendation system, we are going to apply the cosine similarity on the combined column

features = ['keywords','cast','genres','director'] #creating the features var

#create a column in the dataframe to combine all selected features into one column

for feature in features:
	movies[feature] = movies[feature].fillna('')

def combine_features(row): #combine all features into one column
	try:
		return row['keywords'] +" "+row['cast']+" "+row["genres"]+" "+row["director"]
	except:
		print("Error:"), row	

movies["combined_features"] = movies.apply(combine_features,axis=1)

movies['combined_features'].head() #checking the new created column with the combined features

#Create count matrix from this new combined colum

cv = CountVectorizer()

count_matrix = cv.fit_transform(movies["combined_features"])

#Compute the Cosine Similarity based on the count_matrix, note that this is where the input will come from the user::::

cosine_sim = cosine_similarity(count_matrix) 
movie_user_likes = "Fight Club"

#Get index of this movie from its title

def get_title_from_index(index):
	return movies[movies.index == index]["title"].values[0]

def get_index_from_title(title):
	return movies[movies.title == title]["index"].values[0]
  
movie_index = get_index_from_title(movie_user_likes)

similar_movies =  list(enumerate(cosine_sim[movie_index]))

#Get a list of similar movies in descending order of similarity score

sorted_similar_movies = sorted(similar_movies,key=lambda x:x[1],reverse=True)

#Print titles of first 5 movies, including the choise made by the 'user'

i=0
for element in sorted_similar_movies:
		print(get_title_from_index(element[0]))
		i=i+1
		if i>5:
			break
